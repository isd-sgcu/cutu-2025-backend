definitions:
  domain.Education:
    enum:
    - studying
    - graduated
    type: string
    x-enum-varnames:
    - EducationStudying
    - EducationGraduated
  domain.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  domain.ImageResponse:
    properties:
      url:
        type: string
    type: object
  domain.QrResponse:
    properties:
      qrUrl:
        type: string
      userId:
        type: string
    type: object
  domain.Role:
    enum:
    - member
    - staff
    - admin
    type: string
    x-enum-varnames:
    - Member
    - Staff
    - Admin
  domain.Status:
    enum:
    - chula_student
    - alumni
    - general_public
    - general_student
    type: string
    x-enum-varnames:
    - StatusChulaStudent
    - StatusAlumni
    - StatusGeneralPublic
    - StatusGeneralStudent
  domain.TokenResponse:
    properties:
      accessToken:
        type: string
      userId:
        type: string
    type: object
  domain.User:
    properties:
      age:
        type: string
      chronicDisease:
        type: string
      drugAllergy:
        type: string
      education:
        $ref: '#/definitions/domain.Education'
      email:
        type: string
      faculty:
        type: string
      foodLimitation:
        type: string
      graduatedYear:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      invitationCode:
        type: string
      isAcroPhobia:
        type: boolean
      lastEntered:
        description: Timestamp for the last QR scan
        type: string
      name:
        type: string
      phone:
        description: Make phone unique
        type: string
      registeredAt:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      sizeJersey:
        type: string
      status:
        $ref: '#/definitions/domain.Status'
      uid:
        type: string
      university:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/users:
    get:
      description: Retrieve a list of all users with optional filtering
      parameters:
      - description: Filter by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Failed to fetch users
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
    patch:
      consumes:
      - application/json
      description: Update a user by its ID
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to update user role
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Account Info
  /api/users/{id}:
    delete:
      description: Delete a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user by ID
    get:
      description: Retrieve a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to fetch user
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
    patch:
      consumes:
      - application/json
      description: Update a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user by ID
  /api/users/addstaff/{phone}:
    patch:
      description: Add Staff By phone number
      parameters:
      - description: User Phone
        in: path
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: User is already a staff
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to add staff
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add Staff
  /api/users/image/{id}:
    get:
      description: Retrieve a image URL for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ImageResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to fetch user
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Image URL
  /api/users/qr/{id}:
    get:
      description: Retrieve a QR code URL for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.QrResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to fetch user
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get QR code URL
    post:
      description: Retrieve a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: User has already entered
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to fetch User
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Scan QR code
  /api/users/register:
    post:
      consumes:
      - multipart/form-data
      description: Register a new user in the system
      parameters:
      - description: User ID
        in: formData
        name: id
        required: true
        type: string
      - description: User Name
        in: formData
        name: name
        required: true
        type: string
      - description: User Email
        in: formData
        name: email
        type: string
      - description: User Phone
        in: formData
        name: phone
        required: true
        type: string
      - description: User University
        in: formData
        name: university
        type: string
      - description: Jersey Size
        in: formData
        name: sizeJersey
        type: string
      - description: Food Limitation
        in: formData
        name: foodLimitation
        type: string
      - description: Invitation Code
        in: formData
        name: invitationCode
        type: string
      - description: User Status
        enum:
        - chula_student
        - alumni
        - general_public
        - general_student
        in: formData
        name: status
        required: true
        type: string
      - description: User Image
        in: formData
        name: image
        type: file
      - description: User Age
        in: formData
        name: age
        type: string
      - description: Chronic Disease
        in: formData
        name: chronicDisease
        type: string
      - description: Drug Allergy
        in: formData
        name: drugAllergy
        type: string
      - description: Graduated Year
        in: formData
        name: graduatedYear
        type: string
      - description: Faculty
        in: formData
        name: faculty
        type: string
      - description: Is Acrophobia
        in: formData
        name: isAcroPhobia
        required: true
        type: boolean
      - description: Education
        enum:
        - studying
        - graduated
        in: formData
        name: education
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.TokenResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Register a new user
  /api/users/role/{id}:
    patch:
      consumes:
      - application/json
      description: Update a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Role
        in: body
        name: role
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to update user role
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Update user role by ID
  /api/users/signin:
    post:
      description: SignIn
      parameters:
      - description: User ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.TokenResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Failed to signin
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: SignIn
swagger: "2.0"
